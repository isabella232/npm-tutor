#!/usr/bin/env node

"use strict"

var fs = require('fs')
var path = require('path')
var assert = require('assertf')
var exec = require('child_process').exec
var spawn = require('child_process').spawn

process.on('uncaughtException', require('workshop-assertion-message'));

var pruneDir = process.cwd()

var oldPkg = require(path.resolve(__dirname, '../../bootstrap/different-dependencies/package.json'))
try {
var newPkg = require(path.resolve(pruneDir, 'package.json'))
} catch(e) {
  console.error('Cannot find package.json. Are you running npm-tutor from the different-dependencies directory?')
  process.exit(1)
}

assert.deepEqual(oldPkg, newPkg, 'Do not modify the package.json!\nThe unaltered package.json is:\n' + JSON.stringify(oldPkg, null, 2))

var differentDepsDir = path.resolve(__dirname, '../../bootstrap/different-dependencies')

exec('npm ls', {cwd: differentDepsDir}, function(err, oldStdOut, oldStdErr) {
  exec('npm ls', {cwd: pruneDir}, function(err, newStdOut, newStdErr) {
    exec('npm ls --parseable', {cwd: differentDepsDir}, function(err, stdout) {
      assert.ifError(err)
      stdout = stdout.trim()
      var lines = stdout.split('\n')
      var oldConfig = lines.slice(1).map(function(depPath) {
        return path.relative(differentDepsDir, depPath)
      })

      exec('npm ls --parseable', {cwd: pruneDir}, function(err, stdout, stderr) {
        if (err && stderr.match('missing')) {
          console.error(
            '\nOops. Looks like you have missing dependencies:\n'
          )
          console.info(newStdOut)
          console.error(newStdErr)
          return
        }

        if (err && stderr.match('extraneous')) {
          console.error(
            '\nOops. Looks like you have extraneous dependencies:\n'
          )
          console.info(newStdOut)
          console.error(newStdErr)
          return
        }
        assert.ok(!err, '%s%s\n%s\n%s', err && err.message, 'npm ls', stdout, stderr)
        stdout = stdout.trim()
        var lines = stdout.split('\n')
        var newConfig = lines.slice(1).map(function(depPath) {
          return path.relative(pruneDir, depPath)
        })
        console.info('\nOld:\n%s\n\nNew:\n%s', oldStdOut, newStdOut)
        assert.notDeepEqual(newConfig, oldConfig, "Package **hierarchy** must be different.")
        console.info('\nGreat work! That is a different, yet valid configuration for this package.')
      })
    })
  })
})
